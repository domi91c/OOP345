Script started on Mon Oct  5 23:38:31 2015
[?1034hbash-3.2$ whoami
larissa
bash-3.2$ cat Station.h Station.cpp Stations.h Stations.cpp
/*
 * OOP345 - Workshop 2
 * Author: Larissa Voigt
 * Student Number: 024769143
 * Date: September 28, 2015
 */

#include <string>
#include <iostream>

namespace w2 {

  enum PassType {
    ADULT_PASS,
    STUDENT_PASS,
    PASS_COUNT
  };

  class Station {
    private:
      std::string stationName;
      int stationPasses[PASS_COUNT];
    public:
      Station();
      Station(std::fstream& fs); //default constructor
      void set(const std::string&, unsigned, unsigned); //sets the instance variables to the values received in its parameters
      void update(PassType, int); //updates the number of passes - sold if negative, added if positive
      unsigned inStock(PassType) const; //returns the number of passes of the requested type
      const std::string& getName() const; //returns a reference to a string object holding the name of the station
  };
}
/*
 * OOP345 - Workshop 2
 * Author: Larissa Voigt
 * Student Number: 024769143
 * Date: September 28, 2015
 */

#include <string>
#include <fstream>
#include "Station.h"

namespace w2 {

  Station::Station() {
    stationName = "";
    stationPasses[STUDENT_PASS] = 0;
    stationPasses[ADULT_PASS] = 0;
  }

  Station::Station(std::fstream& fs) {
    std::string name;
    std::getline(fs, name, ';');
    int s, a;
    char c;
    fs >> s;
    fs >> a;
    fs.get(c);
    if (c != '\n') {
      std::cerr << "expected a ->>\\n<<- and found a ->>" << c << "<<-\n";
      exit(1);
    }
    set(name, s, a);
  }

  void Station::set(const std::string& name, unsigned student, unsigned adult) {
    stationName = name;
    stationPasses[STUDENT_PASS] = student;
    stationPasses[ADULT_PASS] = adult;
  }

  void Station::update(PassType pt, int number) {
    stationPasses[pt] += number;
  }

  unsigned Station::inStock(PassType pt) const {
    return stationPasses[pt];
  }

  const std::string& Station::getName() const {
    return stationName;
  }
}
/*
 * OOP345 - Workshop 2
 * Author: Larissa Voigt
 * Student Number: 024769143
 * Date: September 28, 2015
 */

#include "Station.h"

namespace w2 {
  class Stations {
    private:
      int stationsCount;
      Station *stationsTable;
      char* filename;
    public:
      Stations ();
      Stations (char* filename);
      ~Stations();
      void update() const;
      void restock() const;
      void report() const;
  };
}
/*
 * OOP345 - Workshop 2
 * Author: Larissa Voigt
 * Student Number: 024769143
 * Date: September 28, 2015
 */

#include <fstream>
#include <iostream>
#include <iomanip>
#include "Stations.h"

namespace w2 {

  Stations::Stations (char* name) {
    filename = name;
    std::cout << "Stations(" << name << ")" << std::endl;
    std::fstream fs(filename);
    if (fs.is_open()) {
      fs >> stationsCount;
      std::cout << "Total Stations " << stationsCount << std::endl;
      char c;
      fs.get(c);
      if (c != ';') {
        std::cerr << "expected a ->>;<<- and found a ->>" << c << "<<-\n";
        exit(1);
      }
      fs.get(c);
      if (c != '\n') {
        std::cerr << "expected a ->>\\n<<- and found a ->>" << c << "<<-\n";
        exit(1);
      }
      stationsTable = new Station[stationsCount];
      for (int i = 0; i < stationsCount; i++) {
        stationsTable[i] = Station(fs);
      }
      fs.close();
    }
  }

  Stations::~Stations() {
    std::ofstream fs(filename);
    if (fs.is_open()) {
      fs << stationsCount << ";" << std::endl;
      for (int i = 0; i < stationsCount; i++) {
        fs << stationsTable[i].getName() << ";"
           << stationsTable[i].inStock(STUDENT_PASS) << " "
           << stationsTable[i].inStock(ADULT_PASS) << std::endl;
      }
    }
    if (stationsTable) {
      delete []stationsTable;
      stationsTable = nullptr;
    }
  }

  void Stations::update() const {
    std::cout << "Passes in Sold :\n";
    std::cout << "---------------:\n";
    for (int i = 0; i < stationsCount; i++) {
      int student, adult;
      std::cout << stationsTable[i].getName() << "\n";
      std::cout << "Student Passes sold : ";
      std::cin >> student;
      std::cout << "Adult Passes sold : ";
      std::cin >> adult;
      stationsTable[i].update(STUDENT_PASS, -student);
      stationsTable[i].update(ADULT_PASS, -adult);
    }
  }

  void Stations::restock() const {
    std::cout << "Passes in Added :\n";
    std::cout << "---------------:\n";
    for (int i = 0; i < stationsCount; i++) {
      int student, adult;
      std::cout << stationsTable[i].getName() << "\n";
      std::cout << "Student Passes added : ";
      std::cin >> student;
      std::cout << "Adult Passes added : ";
      std::cin >> adult;
      stationsTable[i].update(STUDENT_PASS, student);
      stationsTable[i].update(ADULT_PASS, adult);
    }
  }

  void Stations::report() const {
    std::cout << "Passes in Stock : Student Adult\n";
    std::cout << "-------------------------------\n";
    for (int i = 0; i < stationsCount; i++) {
      std::cout << std::left << std::setw(19) << stationsTable[i].getName();
      std::cout << std::setw(6) << stationsTable[i].inStock(STUDENT_PASS);
      std::cout << std::setw(6) << stationsTable[i].inStock(ADULT_PASS);
      std::cout << "\n";
    }
  }
}

bash-3.2$ g++ -o w2 -std=c++11 *.cpp
bash-3.2$ ./w2 Stations.dat 

Command Line : ./w2 Stations.dat 
Stations(Stations.dat)
Total Stations 4
Passes in Sold :
---------------:
Spadina
Student Passes sold : 5
Adult Passes sold : 8
Bathurst
Student Passes sold : 34
Adult Passes sold : 52
Keele
Student Passes sold : 21
Adult Passes sold : 13
Bay
Student Passes sold : 67
Adult Passes sold : 65
Passes in Added :
---------------:
Spadina
Student Passes added : 29
Adult Passes added : 52
Bathurst
Student Passes added : 113
Adult Passes added : 61
Keele
Student Passes added : 51
Adult Passes added : 52
Bay
Student Passes added : 109
Adult Passes added : 107
Passes in Stock : Student Adult
-------------------------------
Spadina            100   200   
Bathurst           200   300   
Keele              100   100   
Bay                200   200   
bash-3.2$ exit
exit

Script done on Mon Oct  5 23:40:03 2015
